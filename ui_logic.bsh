import java.util.concurrent.Callable;
/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

setSyncEnabled(true);
setFileSyncEnabled(true);
startInternalGPS();

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Sync";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "Enable Sync";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Enable Internal GPS";
    }
    actionOn() {
        stopGPS();
        showToast("GPS disabled.");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "Disable Internal GPS";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("GPS enabled.");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable External GPS";
    }
    actionOn() {
        stopGPS();
        showToast("GPS disabled.");
    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "Disable External GPS";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("GPS enabled.");
        } else {
            showToast("Please enable bluetooth.");
            this.isActionOff();
        }
        
    }
});

showWarning("Thanks for trying this module!", "We have provided this module for Demonstration purposes only. You can customise the module yourself or we can help you. Contact info@fedarch.org for help.");

makeLocalID() {
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);",  null);
}

makeLocalID();

/*** control ***/

onEvent("control/data", "show", "refreshEntities();removeNavigationButtons();");
onEvent("control/data/GeoSampleList", "click", "loadGeoSample();");
onEvent("control/data/Create", "delayclick", "newGeoSample();");

refreshEntities() {
    populateCursorList("control/data/GeoSampleList", "select uuid, group_concat(coalesce(measure, ''),' ') as response " + 
        "from (select * from latestNonDeletedArchentIdentifiers order by attributename DESC) " +
        "where aenttypename = 'GeoSample' " +
        "group by uuid " +
        "order by response DESC limit ? offset ?;", 25);
}

removeNavigationButtons() {
    removeNavigationButton("duplicate");
    removeNavigationButton("new");
    removeNavigationButton("close");
    removeNavigationButton("delete");
}

/*** ArchEnt: GeoSample ***/
onEvent("GeoSample", "show", "addGeoSampleNavigation();");
onEvent("GeoSample/GeoSample_GeneralInformation/attachPhoto", "click", "attachPictureTo(\"GeoSample/GeoSample_GeneralInformation/Photo\");");
onEvent("GeoSample/GeoSample_GeneralInformation/takeGPS", "delayclick", "fillInGPS(\"GeoSample/GeoSample_GeneralInformation/\");saveGeoSamplePoint();");
onFocus("GeoSample/GeoSample_GeneralInformation/Northing", "", "saveGeoSamplePoint();");
onFocus("GeoSample/GeoSample_GeneralInformation/Easting", "", "saveGeoSamplePoint();");

onEvent("GeoSample/GeoSample_Rock_Information/New", "delayclick", "confirmSample()");
onEvent("GeoSample/GeoSample_Rock_Information/Delete", "delayclick", "deleteGeoSample()");

onEvent("GeoSample/GeoSample_Top_Sample/next", "click", "showTab(\"GeoSample/GeoSample_Bottom_Sample\");");
onEvent("GeoSample/GeoSample_Bottom_Sample/next", "click", "showTab(\"GeoSample/GeoSample_Rock_Information\");");

String geo_sample_id = null;

newGeoSample() {
    if (!isNull(getFieldValue("control/data/AutoIncrement"))) {
        newTabGroup("GeoSample");
        geo_sample_id = null;
        fetchOne("select substr('00000' || '"+getFieldValue("control/data/AutoIncrement").replaceAll("[^0-9]","")+"',-5);",
            new FetchCallback() {
                onFetch(result) {
                    setFieldValue("control/data/AutoIncrement", result.get(0));
                    fetchOne("select vocabName from vocabulary where vocabid = "+getFieldValue("user/usertab/samplingTeam"),
                        new FetchCallback() {
                            onFetch(result) {
                                String deviceNumber = result.get(0).replaceAll("([^0-9]+)", "");
                                setFieldValue("GeoSample/GeoSample_GeneralInformation/Site_ID", "NZG-"+deviceNumber+"-"+getFieldValue("control/data/AutoIncrement"));
                                setTimestamp("GeoSample/GeoSample_GeneralInformation/Timestamp");
                                setFieldValue("GeoSample/GeoSample_Top_Sample/Top_Sample_ID", getFieldValue("GeoSample/GeoSample_GeneralInformation/Site_ID")+"-A");
                                setFieldValue("GeoSample/GeoSample_Bottom_Sample/Bottom_Sample_ID", getFieldValue("GeoSample/GeoSample_GeneralInformation/Site_ID")+"-B");
                                setFieldValue("GeoSample/GeoSample_Rock_Information/Sampling_Device", getFieldValue("user/usertab/samplingTeam"));
                                saveGeoSample();
                            }
                        });
                }
            });
    } else {
        showWarning("Missing Data", "You need to enter a site ID to start counting from!");
    }
}

loadGeoSample() {
    geo_sample_id = getListItemValue();
    loadGeoSampleFrom(geo_sample_id);
}

loadGeoSampleFrom(entid) {
    geo_sample_id = entid;
    if (isNull(geo_sample_id)) {
        showToast("No {GeoSample} selected.");
        return;
    }
    showTabGroup("GeoSample", geo_sample_id, new FetchCallback() {
        onFetch(result) {
            saveTabGroup("GeoSample", geo_sample_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    geo_sample_id = uuid;
                    autoNumGeoSample();    
                }
            }, true);
        }
    });
}

saveGeoSample() {
    saveTabGroup("GeoSample", geo_sample_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            geo_sample_id = uuid;
            autoNumGeoSample();
            // Turn on autosaving
            saveTabGroup("GeoSample", geo_sample_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    geo_sample_id = uuid;
                    autoNumGeoSample();
                }
            }, true);
        }
    });
}

saveGeoSamplePoint() {
    if(isNull(getFieldValue("GeoSample/GeoSample_GeneralInformation/Northing")) || isNull(getFieldValue("GeoSample/GeoSample_GeneralInformation/Easting"))) return;
    Double northing = Double.parseDouble(getFieldValue("GeoSample/GeoSample_GeneralInformation/Northing"));
    Double easting = Double.parseDouble(getFieldValue("GeoSample/GeoSample_GeneralInformation/Easting"));

    fetchOne("select transform(makePoint("+easting+","+northing+","+getModuleSrid()+"), 3785);", new FetchCallback() {
        onFetch(result) {
            if(!isNull(result)) {
                Point p = new Point(new MapPos(easting, northing), null, null, null);
                ArrayList l = new ArrayList();
                l.add(p);
                saveArchEnt(geo_sample_id, "GeoSample", l, null, null);
            }
        }
    });
}

deleteGeoSample() {
    if (!isNull(geo_sample_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this GeoSample!", "reallyDeleteGeoSample()", "doNotDelete()");
    } else {
        cancelTabGroup("GeoSample", false);
    }
}

reallyDeleteGeoSample() {
    deleteArchEnt(geo_sample_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("GeoSample", false);
            autoNumGeoSample();        
        }
    });
}

loadGeoSampleAttributes() {
    makeVocab("RadioGroup", "GeoSample/GeoSample_Top_Sample/Collected", "Collected");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Top_Sample/Regolith_A", "Regolith A");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Top_Sample/Horizon_A", "Horizon A");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Top_Sample/Upper_Depth_A", "Upper Depth A");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Top_Sample/Bottom_Depth_A", "Bottom Depth A");
    makeVocab("DropDown", "GeoSample/GeoSample_Top_Sample/Dom_Size_A", "Dom Size A");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Top_Sample/Fraction_A", "Fraction A");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Top_Sample/State_A", "State A");

    makeVocab("RadioGroup", "GeoSample/GeoSample_Bottom_Sample/Bottom_Sample_Collected", "Bottom Sample Collected");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Bottom_Sample/Regolith_B", "Regolith B");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Bottom_Sample/Horizon_B", "Horizon B");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Bottom_Sample/Upper_Depth_B", "Upper Depth B");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Bottom_Sample/Bottom_Depth_B", "Bottom Depth B");
    makeVocab("DropDown", "GeoSample/GeoSample_Bottom_Sample/Dom_Size_B", "Dom Size B");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Bottom_Sample/Fraction_B", "Fraction B");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Bottom_Sample/State_B", "State B");

    makeVocab("RadioGroup", "GeoSample/GeoSample_Rock_Information/Slope", "Slope");
    makeVocab("DropDown", "GeoSample/GeoSample_Rock_Information/Landuse", "Landuse");

    fetchAll("select vocabid, vocabname from vocabulary where vocabid in (select value from localSettings where key = 'Device');",
        new FetchCallback() {
            onFetch(result) {
                populateDropDown("GeoSample/GeoSample_Rock_Information/Sampling_Device", result);
            }
        });
}

addGeoSampleNavigation() {
    removeNavigationButton("duplicate");
    removeNavigationButton("new");
    removeNavigationButton("close");
    removeNavigationButton("delete");

    addNavigationButton("duplicate", new ActionButtonCallback() {
        actionOnLabel() {
            "Duplicate {GeoSample}";
        }
        actionOn() {
            showTabGroup("GeoSample", geo_sample_id, new FetchCallback() {
                onFetch(result) {
                    geo_sample_id = null;
                    autoNumGeoSample();
                    setTimestamp("GeoSample/GeoSample_GeneralInformation/Timestamp");
                    populateCameraPictureGallery("GeoSample/GeoSample_GeneralInformation/Photo", new ArrayList());
                    saveTabGroup("GeoSample", geo_sample_id, null, null, new SaveCallback() {
                        onSave(uuid, newRecord) {
                            geo_sample_id = uuid;
                            autoNumGeoSample();
                            saveTabGroup("GeoSample", geo_sample_id, null, null, new SaveCallback() {
                                onSave(uuid, newRecord) {
                                    geo_sample_id = uuid;
                                }
                            }, true);
                        }
                    });
                }
            });
        }
    }, "success");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "New {GeoSample}";
        }
        actionOn() {
            if(!isNull(geo_sample_id)) {
                cancelTabGroup("GeoSample", false);
                newGeoSample();
            } else {
                showAlert("Warning", "You will lose any unsaved changes!", "newGeoSample()", "");
            }   
        }
    }, "success");

    addNavigationButton("close", new ActionButtonCallback() {
        actionOnLabel() {
            "Close {GeoSample}";
        }
        actionOn() {
            if(!isNull(geo_sample_id)) {
                cancelTabGroup("GeoSample", false);
            } else {
                cancelTabGroup("GeoSample", true);
            }

            cancelTabGroup("GeoSample", false);
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "Delete {GeoSample}";
        }
        actionOn() {
            deleteGeoSample();
        }
    }, "danger");
}

autoNumGeoSample() {
    fetchOne("select response, deviceMatch "+
             "from (select coalesce(substr('00000'||(substr(measure,8)+1),-5),'') as response, aenttimestamp, uuid in (select uuid " +
             "      from latestnondeletedaentvalue AS av, localSettings "+
             "      where localSettings.key = 'Device' "+
             "      and localSettings.value = av.VocabID ) as deviceMatch "+
             "  from latestnondeletedarchentidentifiers) "+
             "where substr(response,-5) not in (select substr(measure,-5) from latestnondeletedarchentidentifiers) "+
             "order by deviceMatch desc, aenttimestamp desc limit 1;", new FetchCallback() {
                onFetch(result) {
                    String out = "";
                    if (!isNull(result)) {
                        out = result.get(0);
                        if (result.get(1).equals("0")) {
                            showWarning("Alert!", "ID may be intruding in other Device's allocated ID range.");
                        }
                    }
                    setFieldValue("control/data/AutoIncrement", out);
                }
             });
}

confirmSample() {
    showAlert("Confirm Sample!", "I confirm that I have labeled the sample bag and placed "+getFieldValue("GeoSample/GeoSample_GeneralInformation/Site_ID")+" in the vehicle.", "newGeoSample();", null);
    
}

/*** MISC ***/
makeVocab(String type, String path, String attrib) {
    fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' order by vocabcountorder",
        new FetchCallback() {
            onFetch(result) {
                if(type.equals("CheckBoxGroup")) {
                    populateCheckBoxGroup(path, result);
                } else if(type.equals("DropDown")) {
                    populateDropDown(path, result);
                } else if(type.equals("RadioGroup")) {
                    populateRadioGroup(path, result);
                } else if(type.equals("List")) {
                    populateList(path, result);
                }
            }
        });
}

setTimestamp(String path) {
    setFieldValue(path, new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z").format(new Date()));
}

fillInGPS(String path) {
    Object position = getGPSPosition(); 
    Object projPosition = getGPSPositionProjected();
    if (projPosition != null ) {
        Double latitude = position.getLatitude();
        Double longitude = position.getLongitude();
        Double northing = projPosition.getLatitude();
        Double easting = projPosition.getLongitude();
        setFieldValue(path+"Latitude", latitude);
        setFieldValue(path+"Longitude", longitude);
        setFieldValue(path+"Northing", northing);
        setFieldValue(path+"Easting", easting);
    } else {
        showToast("GPS Not initialized");
    }
}

doNotDelete() {
    showToast("Delete Cancelled.");
}

/*** 'Uneditable' - you can edit the code below with extreme precaution ***/
onEvent("control/map", "show", "loadMapSettings();");
onEvent("control/map/centre", "click", "centreOnMe();");
onEvent("control/map/saveSettings", "click", "saveMapSettings();");

centreOnMe() {
    if(!isExternalGPSOn() && !isInternalGPSOn()) {
        showToast("GPS is not enabled.");
    } else {
        centerOnCurrentPosition("control/map/map");
    }
}

loadMapSettings() {
    jsonFile = getAttachedFilePath("files/data/saved_config.json");
    if(new File(jsonFile).exists()) loadMapViewConfiguration("control/map/map", jsonFile, "showToast(\"Loaded map configuration\")");
}

saveMapSettings() {
    file = getAttachedFilePath("files/data/saved_config.json");
    saveMapViewConfiguration("control/map/map", file, "showToast(\"Saved map configuration\")");
}

initMap() {
    setMapZoom("control/map/map", 15.0f);
    showBaseMap("control/map/map", "Base Layer", "files/data/maps/GSydneyproj.tif");

    isEntity = true;
    queryName = "All entities";
    querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEntIdentifiers";
        
    addDatabaseLayerQuery("control/map/map", queryName, querySQL);

    // define database layer styles for points, lines, polygons and text
    ps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
    ls = createLineStyle(10, Color.GREEN, 0.05f, 0.3f, null);
    pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    ts = createTextStyle(10, Color.WHITE, 40, Typeface.SANS_SERIF);

    showDatabaseLayer("control/map/map", "Saved Data Layer", isEntity, queryName, querySQL, ps, ls, pos, ts);
}

initMap();

/*** USER ***/
populateListForUsers() {
    fetchAll("select userid, fname ||' ' || lname from user", new FetchCallback() {
        onFetch(result) {
            populateDropDown("user/usertab/users", result);
            fetchOne("select value from localSettings where key = 'User';", new FetchCallback() {
                onFetch(result) {
                    if (!isNull(result)) {
                        setFieldValue("user/usertab/users", result.get(0));
                    }
                }
            });
        }
    });
    makeVocab("DropDown", "user/usertab/samplingTeam", "Sampling Device");

    fetchOne("select value from localSettings where key = 'Device';", new FetchCallback() {
        onFetch(result) {
            if (!isNull(result)) {
                setFieldValue("user/usertab/samplingTeam", result.get(0));
            }
        }
    });
}

populateListForUsers();

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getFieldValue("user/usertab/users") + "';",
        new FetchCallback() {
            onFetch(result) {
                User user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
                userid = result.get(0);
                setUser(user);
                username = result.get(1) + " " + result.get(2);
                showTabGroup("control");

                fetchOne("REPLACE INTO localSettings(key, value) VALUES('User', '"+userid+"');", null);
                fetchOne("REPLACE INTO localSettings(key, value) VALUES('Device', '"+getFieldValue("user/usertab/samplingTeam")+"');", null);
                autoNumGeoSample();
            }
        });
}

onEvent("user/usertab/login", "delayclick", "login()");

loadGeoSampleAttributes();