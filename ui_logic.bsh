import java.util.concurrent.Callable;
/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

setSyncEnabled(true);
setFileSyncEnabled(true);
startInternalGPS();

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Sync enabled";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "Sync disabled";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Internal GPS enabled";
    }
    actionOn() {
        stopGPS();
        showToast("GPS disabled.");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "Internal GPS disabled";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("GPS enabled.");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "External GPS enabled";
    }
    actionOn() {
        stopGPS();
        showToast("GPS disabled.");
    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "External GPS disabled";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("GPS enabled.");
        } else {
            showToast("Please enable bluetooth.");
            this.isActionOff();
        }
        
    }
});

showWarning("Thanks for trying this module!", "We have provided this module for Demonstration purposes only. You can customise the module yourself or we can help you. Contact info@fedarch.org for help.");

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);",  null);
}

makeLocalID();

/*** control ***/

onEvent("control/data", "show", "refreshEntities();removeNavigationButtons();");
onEvent("control/data/GeoSampleList", "click", "loadGeoSample();");
onEvent("control/data/Create", "delayclick", "newGeoSample();");
onEvent("control/gps/connectinternal", "click", "internalGPSLogic();");
onEvent("control/gps/connectexternal", "click", "externalGPSLogic();");

refreshEntities() {
    fetchEntityList("GeoSample", new FetchCallback() {
        onFetch(result) {
            populateList("control/data/GeoSampleList", result);    
        }
        
    });
}

removeNavigationButtons() {
    removeNavigationButton("save");
    removeNavigationButton("delete");
}

internalGPSLogic() {
    if(isExternalGPSOn()) {
        stopGPS();
    }
    startInternalGPS();
}

externalGPSLogic() {
    if(isInternalGPSOn()) {
        stopGPS();
    }
    startExternalGPS();
}

/*** ArchEnt: GeoSample ***/
onEvent("GeoSample", "show", "addGeoSampleNavigation();");
onEvent("GeoSample/GeoSample_GeneralInformation/attachPhoto", "click", "attachPictureTo(\"GeoSample/GeoSample_GeneralInformation/Photo\");");
onEvent("GeoSample/GeoSample_GeneralInformation/takeGPS", "delayclick", "fillInGPS(\"GeoSample/GeoSample_GeneralInformation/\");");

onEvent("GeoSample/GeoSample_Rock_Information/SaveAndNew", "delayclick", "confirmSample()");
onEvent("GeoSample/GeoSample_Rock_Information/Delete", "delayclick", "deleteGeoSample()");

onEvent("GeoSample/GeoSample_Top_Sample/next", "click", "showTab(\"GeoSample/GeoSample_Bottom_Sample\");");
onEvent("GeoSample/GeoSample_Bottom_Sample/next", "click", "showTab(\"GeoSample/GeoSample_Rock_Information\");");

String geo_sample_id = null;

newGeoSample(){
    if (!isNull(getFieldValue("control/data/AutoIncrement"))) {
        newTabGroup("GeoSample");
        geo_sample_id = null;
        fetchOne("select substr('00000' || '"+getFieldValue("control/data/AutoIncrement").replaceAll("[^0-9]","")+"',-5);",
            new FetchCallback() {
                onFetch(result) {
                    setFieldValue("control/data/AutoIncrement", result.get(0));
                    fetchOne("select vocabName from vocabulary where vocabid = "+getFieldValue("user/usertab/samplingTeam"),
                        new FetchCallback() {
                            onFetch(result) {
                                String deviceNumber = result.get(0).replaceAll("([^0-9]+)", "");
                                setFieldValue("GeoSample/GeoSample_GeneralInformation/Site_ID", "NZG-"+deviceNumber+"-"+getFieldValue("control/data/AutoIncrement"));
                                fetchOne("select datetime('now', 'localtime');", new FetchCallback() {
                                    onFetch(result) {
                                        setFieldValue("GeoSample/GeoSample_GeneralInformation/Timestamp", result.get(0));
                                    }
                                });
                                setFieldValue("GeoSample/GeoSample_Top_Sample/Top_Sample_ID", getFieldValue("GeoSample/GeoSample_GeneralInformation/Site_ID")+"-A");
                                setFieldValue("GeoSample/GeoSample_Bottom_Sample/Bottom_Sample_ID", getFieldValue("GeoSample/GeoSample_GeneralInformation/Site_ID")+"-B");
                                setFieldValue("GeoSample/GeoSample_Rock_Information/Sampling_Device", getFieldValue("user/usertab/samplingTeam"));
                                saveTabGroup("GeoSample", geo_sample_id, null, null, new SaveCallback() {
                                    onSave(uuid, newRecord) {
                                        geo_sample_id = uuid;
                                        autoNumGeoSample();
                                        // Turn on autosaving
                                        saveTabGroup("GeoSample", geo_sample_id, null, null, new SaveCallback() {
                                            onSave(uuid, newRecord) {
                                                geo_sample_id = uuid;
                                                autoNumGeoSample();
                                            }
                                        }, true);
                                    }
                                });
                            }
                        });
                }
            });
    } else {
        showWarning("Missing Data", "You need to enter a site ID to start counting from!");
    }
}

loadGeoSample() {
    geo_sample_id = getListItemValue();
    loadGeoSampleFrom(geo_sample_id);
}

loadGeoSampleFrom(entid) {
    geo_sample_id = entid;
    if (isNull(geo_sample_id)) {
        showToast("No {GeoSample} selected.");
        return;
    }
    showTabGroup("GeoSample", geo_sample_id, new FetchCallback() {
        onFetch(result){
            saveTabGroup("GeoSample", geo_sample_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    geo_sample_id = uuid;
                    autoNumGeoSample();    
                }
            }, true);
        }
    });
}

saveAndNewGeoSample() {
    if (isNull(getFieldValue("GeoSample/GeoSample_GeneralInformation/Site_ID"))) {
        showWarning("Validation Error", "Cannot save {GeoSample} without Site ID");
        return;
    }
    saveTabGroup("GeoSample", geo_sample_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            geo_sample_id = uuid;
            newGeoSample();
        }
    });
}

deleteGeoSample(){
    if (!isNull(geo_sample_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this GeoSample!", "reallyDeleteGeoSample()", "doNotDelete()");
    } else {
        cancelTabGroup("GeoSample", false);
    }
}

reallyDeleteGeoSample(){
    deleteArchEnt(geo_sample_id);
    cancelTabGroup("GeoSample", false);
    autoNumGeoSample();
}

autoNumGeoSample() {
    fetchOne("select response, deviceMatch "+
             "from (select coalesce(substr('00000'||(substr(measure,8)+1),-5),'') as response, aenttimestamp, uuid in (select uuid " +
             "      from latestnondeletedaentvalue AS av, localSettings "+
             "      where localSettings.key = 'Device' "+
             "      and localSettings.value = av.VocabID ) as deviceMatch "+
             "  from latestnondeletedarchentidentifiers) "+
             "where substr(response,-5) not in (select substr(measure,-5) from latestnondeletedarchentidentifiers) "+
             "order by deviceMatch desc, aenttimestamp desc limit 1;", new FetchCallback() {
                onFetch(result) {
                    String out = "";
                    if (!isNull(result)){
                        out = result.get(0);
                        if (result.get(1).equals("0")) {
                            showWarning("Alert!", "ID may be intruding in other Device's allocated ID range.");
                        }
                    }
                    setFieldValue("control/data/AutoIncrement", out);
                }
             });
}

loadGeoSampleAttributes(){
    makeVocab("RadioGroup", "GeoSample/GeoSample_Top_Sample/Collected", "Collected");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Top_Sample/Regolith_A", "Regolith A");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Top_Sample/Horizon_A", "Horizon A");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Top_Sample/Upper_Depth_A", "Upper Depth A");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Top_Sample/Bottom_Depth_A", "Bottom Depth A");
    makeVocab("DropDown", "GeoSample/GeoSample_Top_Sample/Dom_Size_A", "Dom Size A");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Top_Sample/Fraction_A", "Fraction A");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Top_Sample/State_A", "State A");

    makeVocab("RadioGroup", "GeoSample/GeoSample_Bottom_Sample/Bottom_Sample_Collected", "Bottom Sample Collected");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Bottom_Sample/Regolith_B", "Regolith B");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Bottom_Sample/Horizon_B", "Horizon B");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Bottom_Sample/Upper_Depth_B", "Upper Depth B");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Bottom_Sample/Bottom_Depth_B", "Bottom Depth B");
    makeVocab("DropDown", "GeoSample/GeoSample_Bottom_Sample/Dom_Size_B", "Dom Size B");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Bottom_Sample/Fraction_B", "Fraction B");
    makeVocab("RadioGroup", "GeoSample/GeoSample_Bottom_Sample/State_B", "State B");

    makeVocab("RadioGroup", "GeoSample/GeoSample_Rock_Information/Slope", "Slope");
    makeVocab("DropDown", "GeoSample/GeoSample_Rock_Information/Landuse", "Landuse");

    fetchAll("select vocabid, vocabname from vocabulary where vocabid in (select value from localSettings where key = 'Device');",
        new FetchCallback() {
            onFetch(result) {
                populateDropDown("GeoSample/GeoSample_Rock_Information/Sampling_Device", result);
            }
        });
}

addGeoSampleNavigation() {
    removeNavigationButton("save");
    removeNavigationButton("delete");

    addNavigationButton("save", new ActionButtonCallback() {
        actionOnLabel() {
            "Save {GeoSample}";
        }
        actionOn() {
            saveTabGroup("GeoSample", geo_sample_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    geo_sample_id = uuid;
                    autoNumGeoSample();    
                }
            });
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "Delete {GeoSample}";
        }
        actionOn() {
            deleteGeoSample();
        }
    }, "danger");
}

cleanNumber(){
    
}

confirmSample(){
    showAlert("Confirm Sample!", "I confirm that I have labeled the sample bag and placed "+getFieldValue("GeoSample/GeoSample_GeneralInformation/Site_ID")+" in the vehicle.", "saveAndNewGeoSample();", null);
    
}

/*** MISC ***/
saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}

saveEntitiesToRel(String type, String entity1, String entity2, Callable callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
            if(callback != null) callback.call();
        }
    });
}

saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, e1verb);
            addReln(entity2, rel_id, e2verb);
        }
    });
}

makeVocab(String type, String path, String attrib){
    fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' order by vocabcountorder",
        new FetchCallback() {
            onFetch(result) {
                if(type.equals("CheckBoxGroup")) {
                    populateCheckBoxGroup(path, result);
                } else if(type.equals("DropDown")) {
                    populateDropDown(path, result);
                } else if(type.equals("RadioGroup")) {
                    populateRadioGroup(path, result);
                } else if(type.equals("List")) {
                    populateList(path, result);
                }
            }
        });
}

fillInGPS(String path){
    Object position = getGPSPosition();    
    Object projPosition = getGPSPositionProjected();
    if (projPosition != null ){
        Double latitude = position.getLatitude();
        Double longitude = position.getLongitude();
        Double northing = projPosition.getLatitude();
        Double easting = projPosition.getLongitude();
        setFieldValue(path+"Latitude", latitude);
        setFieldValue(path+"Longitude", longitude);
        setFieldValue(path+"Northing", northing);
        setFieldValue(path+"Easting", easting);
    } else {
        showToast("GPS Not initialized");
    }
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

/*** 'Uneditable' - you can edit the code below with extreme precaution ***/
onEvent("control/map", "show", "loadMapSettings();");
onEvent("control/map/centre", "click", "centreOnMe();");
onEvent("control/map/saveSettings", "click", "saveMapSettings();");

centreOnMe() {
    if(!isExternalGPSOn() && !isInternalGPSOn()) {
        showToast("GPS is not enabled.");
    } else {
        centerOnCurrentPosition("control/map/map");
    }
}

loadMapSettings() {
    jsonFile = getAttachedFilePath("files/data/saved_config.json");
    if(new File(jsonFile).exists()) loadMapViewConfiguration("control/Map/map", jsonFile, "showToast(\"Loaded map configuration\")");
}

saveMapSettings() {
    file = getAttachedFilePath("files/data/saved_config.json");
    saveMapViewConfiguration("control/Map/map", file, "showToast(\"Saved map configuration\")");
}

initMap() {
    setMapZoom("control/map/map", 15.0f);

    showBaseMap("control/map/map", "Base Layer", "files/data/maps/Otago_RTP.tif");
    //createCanvasLayer("control/map/map", "Non-saved sketch layer");
/*
    //DATA_ENTRY_LAYER_ID = createCanvasLayer("control/map/map", DATA_ENTRY_LAYER);

    isEntity = true;
    queryName = "All entities";
    querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEntIdentifiers";
        
    addDatabaseLayerQuery("control/map/map", queryName, querySQL);

    addTrackLogLayerQuery("control/map/map", "track log entities", 
        "SELECT uuid, max(aenttimestamp) as aenttimestamp\n" + 
        " FROM archentity join aenttype using (aenttypeid)\n" +
        " where archentity.deleted is null\n" + 
        "   and lower(aenttypename) = lower('gps_track')\n" + 
        " group by uuid\n" + 
        " having max(aenttimestamp)");
        
    addSelectQueryBuilder("control/map/map", "Select entity by type", createQueryBuilder(
        "select uuid\n" + 
        "  from latestNonDeletedArchent\n" + 
        "  JOIN latestNonDeletedAentValue using (uuid)\n" + 
        "  join aenttype using (aenttypeid)\n" + 
        "  LEFT OUTER JOIN vocabulary using (vocabid, attributeid) \n" + 
        "  where lower(aenttypename) = lower(?) \n" + 
        "   group by uuid").addParameter("Type", "RemoteSensingGeoSample"));
        
    //addLegacySelectQueryBuilder("control/map/map", "Select geometry by id", "files/data/maps/sydney.sqlite", "Geology100_Sydney", 
    //  createLegacyQueryBuilder("Select PK_UID from Geology100_Sydney where PK_UID = ?").addParameter("ID", null));
                    
    // define database layer styles for points, lines, polygons and text
    ps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
    ls = createLineStyle(10, Color.GREEN, 0.05f, 0.3f, null);
    pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    ts = createTextStyle(10, Color.WHITE, 40, Typeface.SANS_SERIF);

    showDatabaseLayer("control/map/map", "Saved Data Layer", isEntity, queryName, querySQL, ps, ls, pos, ts);*/


}

initMap();

/*** USER ***/

populateListForUsers() {
    fetchAll("select userid, fname ||' ' || lname from user", new FetchCallback() {
        onFetch(result) {
            populateDropDown("user/usertab/users", result);
            fetchOne("select value from localSettings where key = 'User';", new FetchCallback() {
                onFetch(result) {
                    if (!isNull(result)){
                        setFieldValue("user/usertab/users", result.get(0));
                    }
                }
            });
        }
    });
    makeVocab("RadioGroup", "user/usertab/Team", "Device ID");

    fetchOne("select value from localSettings where key = 'Team';", new FetchCallback() {
        onFetch(result) {
            if (!isNull(result)){
                setFieldValue("user/usertab/Team", result.get(0));
            }
        }
    });
}

populateListForUsers();

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getFieldValue("user/usertab/users") + "';",
        new FetchCallback() {
            onFetch(result) {
                User user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
                userid = result.get(0);
                setUser(user);
                username = result.get(1) + " " + result.get(2);
                showTabGroup("control");

                fetchOne("REPLACE INTO localSettings(key, value) VALUES('User', '"+userid+"');", null);
                fetchOne("REPLACE INTO localSettings(key, value) VALUES('Device', '"+getFieldValue("user/usertab/samplingTeam")+"');", null);
                autoNumGeoSample();
            }
        });
}


onEvent("user/usertab/login", "delayclick", "login()");

/*** SYNC ***/

onEvent("control/gps/startsync", "click", "startSync()");
onEvent("control/gps/stopsync", "click", "stopSync()");

setSyncMinInterval(10.0f);
setSyncMaxInterval(20.0f);
setSyncDelay(5.0f);

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

loadGeoSampleAttributes();